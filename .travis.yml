language: cpp

_packages:
  - &clang clang-3.8
  - &gcc g++-5

_apt: &apt-common
  sources:
    - llvm-toolchain-trusty-3.8
    - ubuntu-toolchain-r-test

cache:
  ccache: true
  directories:
    - build
    - .mtime_cache

matrix:
  include:

    # Linux clang
    - os: linux
      sudo: required
      env: BUILD_TYPE=Debug USE_VALGRIND=true CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *clang
            - *gcc
            - valgrind
      compiler: clang

    - os: linux
      sudo: required
      env: BUILD_TYPE=Debug SANITIZE=undefined CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *clang
            - *gcc
      compiler: clang

    - os: linux
      sudo: required
      env: BUILD_TYPE=Debug SANITIZE=address CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *clang
            - *gcc
      compiler: clang

    - os: linux
      sudo: required
      env: BUILD_TYPE=Release CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *clang
            - *gcc
      compiler: clang

    # Linux gcc
    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug USE_VALGRIND=true CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
            - valgrind
      compiler: gcc

    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug SANITIZE=undefined CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
      compiler: gcc

    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug SANITIZE=address CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
      compiler: gcc

    - os: linux
      sudo: false
      env: BUILD_TYPE=Release CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
      compiler: gcc

    # OSX clang
    - os: osx
      osx_image: xcode9.2
      env: BUILD_TYPE=Debug USE_VALGRIND=true CMAKE_GENERATOR="Xcode"
      addons:
        homebrew:
          update: true
          packages:
            - ccache
            - cmake
            - valgrind
      compiler: clang

    - os: osx
      osx_image: xcode8.3
      env: BUILD_TYPE=Release CMAKE_GENERATOR="Xcode"
      addons:
        homebrew:
          update: true
          packages:
            - ccache
            - cmake
      compiler: clang

    # Code coverage
    - os: linux
      sudo: false
      if: branch in (master, develop)
      env: BUILD_TYPE=Debug CMAKE_GENERATOR="Unix Makefiles" ENABLE_COVERAGE=true
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
            - lcov
      compiler: gcc

    # Conan
    - os: linux
      sudo: required
      language: python
      python: "3.7"
      if: branch = master
      env: CC=clang CXX=clang++
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
      install:
        - pip install conan
      script:
        - conan create . morwenn/stable
      after_success:
        - conan remote add bintray https://api.bintray.com/conan/morwenn/cpp-sort
        - conan user -r bintray -p ${CONAN_PASSWORD} morwenn
        - conan upload --all -r bintray cpp-sort/1.3.0@morwenn/stable

before_install:
  - if [[ $TRAVIS_OS_NAME = "linux" && $CXX = "clang++" ]]; then
        sudo ln -s $(which ccache) /usr/lib/ccache/clang++;
        export CXXFLAGS="-Qunused-arguments";
    fi

install:
  - gem install mtime_cache
  - if [[ $TRAVIS_OS_NAME = "osx" ]]; then
        export PATH="/usr/local/opt/ccache/libexec:$PATH";
    fi
  - if [[ $CXX = "g++" ]]; then export CXX="g++-5"; fi
  - if [[ $CXX = "clang++" ]]; then export CXX="clang++-3.8"; fi

script:
  - mtime_cache testsuite/**/*.{%{cpp}} -c .mtime_cache/cache.json
  - cmake -H. -Bbuild
          -DCMAKE_CONFIGURATION_TYPES="${BUILD_TYPE}"
          -DCMAKE_BUILD_TYPE="${BUILD_TYPE}"
          -DSANITIZE="${SANITIZE}"
          -DUSE_VALGRIND=${USE_VALGRIND}
          -DENABLE_COVERAGE=${ENABLE_COVERAGE}
          -G"${CMAKE_GENERATOR}"
  - if [[ $TRAVIS_OS_NAME = "osx" ]]; then
        cmake --build build --config ${BUILD_TYPE} -j 2;
    else
        cmake --build build --config ${BUILD_TYPE} -- -j2;
    fi
  - cd build
  - if [[ $USE_VALGRIND = true ]]; then
        travis_wait 50 ctest -T memcheck -C ${BUILD_TYPE} --output-on-failure -j 4;
    else
        travis_wait ctest -C ${BUILD_TYPE} --output-on-failure;
    fi

after_success:
  - if [[ $ENABLE_COVERAGE = true ]]; then
        make gcov;
        make lcov;
        bash <(curl -s https://codecov.io/bash) -X gcov || echo "Codecov did not collect coverage reports";
    fi

after_failure:
  - if [[ $USE_VALGRIND = true ]]; then
        find ./Testing/Temporary -type f -name "MemoryChecker.*.log" -size +1300c | xargs cat;
    fi

notifications:
  email: false
